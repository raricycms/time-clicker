// Âª∫Á≠ëÁ≥ªÁªü
class BuildingsManager {
    constructor() {
        this.buildings = [
            {
                id: 'manual_extractor',
                name: 'ÊâãÂä®ÊèêÂèñÂô®',
                description: '‰∏Ä‰∏™ÁÆÄÂçïÁöÑÊâãÂä®Ë£ÖÁΩÆÔºåËÆ©‰Ω†ÁöÑÊØèÊ¨°ÁÇπÂáªÈÉΩÊõ¥ÊúâÊïàÁéá',
                baseCost: 15,
                baseProduction: 1.02, // Êîπ‰∏∫2%ÁöÑ‰πòÊ≥ïÂä†Êàê
                icon: 'üëÜ',
                unlocked: true,
                type: 'click_multiplier' // ÁâπÊÆäÁ±ªÂûãÔºöÁÇπÂáªÂÄçÁéá
            },
            {
                id: 'auto_clicker',
                name: 'Ëá™Âä®ÁÇπÂáªËáÇ',
                description: 'Êú∫Ê¢∞ËáÇÊ®°ÊãüÁÇπÂáªË°å‰∏∫ÔºåÊØèÂçÅÁßíËá™Âä®ÁÇπÂáª‰∏ÄÊ¨°',
                baseCost: 15,
                baseProduction: 0, // ÁâπÊÆäÔºöÊØè10ÁßíËá™Âä®ÁÇπÂáª
                icon: 'ü¶æ',
                unlocked: true,
                type: 'auto_clicker'
            },
            {
                id: 'alarm_clock',
                name: 'ÈóπÈíü',
                description: 'Âè§ËÄÅËÄåÂèØÈù†ÁöÑÊú∫Ê¢∞Ë£ÖÁΩÆÔºåÊØèÁßíÂíîÂìí‰∏Ä‰∏ãÔºåËé∑Âèñ‰∏ÄÁÇπËÉΩÈáè',
                baseCost: 50,
                baseProduction: 1,
                icon: '‚è∞',
                unlocked: true,
                type: 'normal'
            },
            {
                id: 'graphics_card',
                name: 'ÊòæÂç°',
                description: 'ÈÄöËøáËÆ°ÁÆóÂ§çÊùÇÁöÑÂìàÂ∏åÂÄºÔºå‰ªéÊï∞Â≠ó‰∏ñÁïå‰∏≠ÊåñÂá∫Êó∂Èó¥ËÉΩÈáè',
                baseCost: 500,
                baseProduction: 8,
                icon: 'üéÆ',
                unlocked: true,
                type: 'normal'
            },
            {
                id: 'cpu',
                name: 'CPU',
                description: 'CPUÂÜÖÈÉ®ÁöÑÊô∂‰ΩìÁÆ°Âø´ÈÄüÂà∑Êñ∞ÔºåÊØèÊ¨°Áä∂ÊÄÅÊîπÂèòÈÉΩËé∑ÂæóÂæÆÈáèËÉΩÈáè',
                baseCost: 3000,
                baseProduction: 47,
                icon: 'üíª',
                unlocked: true,
                type: 'normal'
            },
            {
                id: 'genshin_impact',
                name: 'ÂéüÁ•û',
                description: 'ÂéüÁ•ûÂú®ÂêéÂè∞ËøêË°åÔºå‰ºòÂåñÊï¥‰∏™Á≥ªÁªüÊÄßËÉΩÔºåÂêåÊó∂‰∫ßÁîüÊó∂Èó¥ËÉΩÈáè',
                baseCost: 50000,
                baseProduction: 260,
                icon: 'üé≤',
                unlocked: false,
                type: 'normal' // Êîπ‰∏∫ÊôÆÈÄöÂª∫Á≠ë
            },
            {
                id: 'prism',
                name: '‰∏âÊ£±Èïú',
                description: 'ÂàÜËß£ÂÖâË∞±ÔºåÊØè‰∏™ÂÖâÂ≠êÁöÑÊ≥¢ÈïøÂèòÂåñÈÉΩË¢´ËΩ¨Êç¢‰∏∫Êó∂Èó¥ËÉΩÈáè',
                baseCost: 500000,
                baseProduction: 1400,
                icon: 'üîª',
                unlocked: false,
                type: 'normal'
            },
            {
                id: 'time_resistor',
                name: 'Êó∂Èó¥ÁîµÈòª',
                description: 'ÁâπÂà∂ÁîµÈòªÂô®ÔºåÊØè‰∏™ÈÄöËøáÁöÑÁîµÂ≠êÈÉΩÂú®Êó∂Á©∫‰∏≠Áïô‰∏ãÁóïËøπÔºå‰∫ßÁîüËÉΩÈáè',
                baseCost: 5000000,
                baseProduction: 7800,
                icon: '‚ö°',
                unlocked: false,
                type: 'normal'
            },
            {
                id: 'grandmother_clock',
                name: 'Á•ñÊØçÈíü',
                description: 'Âè§ËÄÅÁöÑÈíüÊëÜÂà∂ÈÄ†Êó∂Èó¥ÊÇñËÆ∫Ôºå‰ªéÂõ†ÊûúÂæ™ÁéØ‰∏≠ÊèêÂèñËÉΩÈáè',
                baseCost: 75000000,
                baseProduction: 44000,
                icon: 'üï∞Ô∏è',
                unlocked: false,
                type: 'normal'
            },
            {
                id: 'schrodinger_box',
                name: 'ËñõÂÆöË∞îÁöÑÁå´ÁÆ±',
                description: 'ÈáèÂ≠êÂè†Âä†ÊÄÅÁöÑÁå´Âú®ÁÆ±‰∏≠Ê≥¢Âä®ÔºåÊØèÊ¨°ËßÇÊµãÈÉΩ‰∫ßÁîüÂ§ßÈáèËÉΩÈáè',
                baseCost: 1000000000,
                baseProduction: 260000,
                icon: 'üì¶',
                unlocked: false,
                type: 'normal'
            },
            {
                id: 'recursive_copier',
                name: 'ÈÄíÂΩíÂ§çÂà∂Êú∫',
                description: 'Ëá™ÊàëÂ§çÂà∂ÁöÑÊú∫Âô®ÔºåÂ§çÂà∂Êï∞ÈáèË∂äÂ§öÔºåÂçï‰∏™Êú∫Âô®ÊïàÁéáË∂äÈ´ò',
                baseCost: 15000000000,
                baseProduction: 1600000,
                icon: '‚ôæÔ∏è',
                unlocked: false,
                type: 'recursive' // ÁâπÊÆäÁ±ªÂûãÔºöÊï∞ÈáèÂΩ±Âìç‰∫ßÈáè
            },
            {
                id: 'js_console',
                name: 'JavaScript Console',
                description: 'ÈÄöËøá‰øÆÊîπÁé∞ÂÆûÁöÑ‰ª£Á†ÅÔºåÁõ¥Êé•‰ªéËôöÊó†‰∏≠ÂàõÈÄ†Êó∂Èó¥ËÉΩÈáè',
                baseCost: 200000000000,
                baseProduction: 10000000,
                icon: 'üíª',
                unlocked: false,
                type: 'normal'
            },
            {
                id: 'save_editor',
                name: 'Â≠òÊ°£ËØªÂèñÂô®',
                description: 'ËÉΩÂ§üËØªÂèñÂπ∂‰øÆÊîπÊó∂Èó¥Á∫øÊú¨Ë∫´Ôºå‰ªéÂπ≥Ë°åÁé∞ÂÆû‰∏≠Ëé∑ÂèñËÉΩÈáè',
                baseCost: 3000000000000,
                baseProduction: 65000000,
                icon: 'üíæ',
                unlocked: false,
                type: 'normal'
            },
            {
                id: 'fourth_wall_breaker',
                name: 'Á¨¨ÂõõÈù¢Â¢ôÁ≤âÁ¢éÂô®',
                description: 'ÊâìÁ†¥Ê∏∏Êàè‰∏éÁé∞ÂÆûÁöÑÁïåÈôêÔºå‰ªéÁé©ÂÆ∂ÁöÑÊ≥®ÊÑèÂäõ‰∏≠Ê±≤ÂèñËÉΩÈáè',
                baseCost: 50000000000000,
                baseProduction: 430000000,
                icon: 'üß±',
                unlocked: false,
                type: 'normal'
            },
            {
                id: 'real_time_machine',
                name: 'ÁúüÊ≠£ÁöÑÊó∂ÂÖâÊú∫',
                description: 'ËøôÂ∞±ÊòØ‰Ω†Ë¶Å‰øÆÂ§çÁöÑÊó∂ÂÖâÊú∫Êú¨Ë∫´ÔºåÁé∞Âú®ÂÆÉÂºÄÂßãËá™Êàë‰øÆÂ§ç‰∫Ü',
                baseCost: 1000000000000000,
                baseProduction: 2900000000,
                icon: 'üöÄ',
                unlocked: false,
                type: 'normal'
            }
        ];
        
        this.buildingCounts = {};
        this.totalProduction = 0;
        this.buyAmount = 1; // Ë¥≠‰π∞Êï∞ÈáèÔºö1, 10, 50, 100
        
        this.init();
    }
    
    init() {
        this.setupBuyAmountSelector();
        this.renderBuildings();
        this.updateProduction();
    }
    
    setupBuyAmountSelector() {
        const buyAmountBtns = document.querySelectorAll('.buy-amount-btn');
        buyAmountBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                // ÁßªÈô§ÊâÄÊúâactiveÁ±ª
                buyAmountBtns.forEach(b => b.classList.remove('active'));
                // Ê∑ªÂä†activeÁ±ªÂà∞ÂΩìÂâçÊåâÈíÆ
                btn.classList.add('active');
                // Êõ¥Êñ∞Ë¥≠‰π∞Êï∞Èáè
                this.buyAmount = parseInt(btn.dataset.amount);
                // ÈáçÊñ∞Ê∏≤ÊüìÂª∫Á≠ë‰ª•Êõ¥Êñ∞‰ª∑Ê†ºÊòæÁ§∫
                this.renderBuildings();
            });
        });
    }
    
    renderBuildings() {
        const buildingsGrid = document.getElementById('buildingsGrid');
        buildingsGrid.innerHTML = '';
        
        this.buildings.forEach(building => {
            if (!building.unlocked) return;
            
            const count = this.buildingCounts[building.id] || 0;
            const cost = this.getBulkCost(building, this.buyAmount);
            const canAfford = window.game && window.game.timeEnergy >= cost;
            
            const buildingCard = document.createElement('div');
            buildingCard.className = `building-card ${canAfford ? 'affordable' : ''}`;
            
            let productionText = '';
            if (building.type === 'click_multiplier') {
                productionText = `ÁÇπÂáª√ó${building.baseProduction.toFixed(2)}ÂÄç`;
            } else if (building.type === 'auto_clicker') {
                productionText = 'ÊØè10ÁßíËá™Âä®ÁÇπÂáª1Ê¨°';
            } else if (building.type === 'recursive') {
                const actualProduction = this.getActualProduction(building);
                productionText = `${this.formatNumber(actualProduction)}/Áßí`;
            } else if (building.type === 'normal') {
                const actualProduction = this.getActualProduction(building);
                productionText = `${this.formatNumber(actualProduction)}/Áßí`;
            }
            
            buildingCard.innerHTML = `
                <div class="building-header">
                    <div class="building-name">
                        <span class="building-icon">${building.icon}</span>
                        ${building.name}
                    </div>
                    <div class="building-count">${count}</div>
                </div>
                <div class="building-description">${building.description}</div>
                <div class="building-stats">
                    <div class="building-cost">
                        ${this.buyAmount > 1 ? `${this.buyAmount}‰∏™: ` : 'ÊàêÊú¨: '}${this.formatNumber(cost)}
                    </div>
                    <div class="building-production">${productionText}</div>
                </div>
            `;
            
            // Â∑¶ÈîÆË¥≠‰π∞ÔºåÂè≥ÈîÆÊü•ÁúãËØ¶ÊÉÖ
            buildingCard.addEventListener('click', () => this.purchaseBuilding(building));
            buildingCard.addEventListener('contextmenu', (e) => {
                e.preventDefault();
                e.stopPropagation();
                this.showBuildingDetails(building);
            });
            
            // Ê∑ªÂä†ËØ¶ÊÉÖÊåâÈíÆ
            const detailsBtn = document.createElement('button');
            detailsBtn.textContent = '‚ÑπÔ∏è';
            detailsBtn.style.cssText = `
                position: absolute;
                top: 5px;
                right: 5px;
                background: none;
                border: none;
                font-size: 0.8rem;
                cursor: pointer;
                opacity: 0.7;
                padding: 2px;
            `;
            detailsBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                this.showBuildingDetails(building);
            });
            
            buildingCard.style.position = 'relative';
            buildingCard.appendChild(detailsBtn);
            buildingsGrid.appendChild(buildingCard);
        });
    }
    
    purchaseBuilding(building) {
        const cost = this.getBulkCost(building, this.buyAmount);
        
        if (window.game && window.game.timeEnergy >= cost) {
            // Êâ£Èô§ËÉΩÈáè
            window.game.timeEnergy -= cost;
            
            // Â¢ûÂä†Âª∫Á≠ëÊï∞Èáè
            this.buildingCounts[building.id] = (this.buildingCounts[building.id] || 0) + this.buyAmount;
            
            // Êõ¥Êñ∞‰∫ßÂá∫
            this.updateProduction();
            
            // Êõ¥Êñ∞UI
            this.renderBuildings();
            window.game.updateUI();
            
            // Ë¥≠‰π∞Âä®Áîª
            const buildingCard = event.currentTarget;
            buildingCard.classList.add('building-purchase');
            setTimeout(() => buildingCard.classList.remove('building-purchase'), 300);
            
            // ÊòæÁ§∫Ë¥≠‰π∞ÈÄöÁü•
            const message = this.buyAmount === 1 
                ? `Ë¥≠‰π∞‰∫Ü ${building.name}ÔºÅ` 
                : `Ë¥≠‰π∞‰∫Ü ${this.buyAmount} ‰∏™ ${building.name}ÔºÅ`;
            window.game.showNotification(message, 'success');
            
            // Ê£ÄÊü•Ëß£ÈîÅÊñ∞Âª∫Á≠ë
            this.checkUnlocks();
            
            // Ê£ÄÊü•ÂçáÁ∫ß
            if (window.upgradesManager) {
                window.upgradesManager.checkAvailableUpgrades();
            }
            
            // ‰øùÂ≠òÊ∏∏Êàè
            window.game.saveGame();
        } else {
            window.game.showNotification('Êó∂Èó¥ËÉΩÈáè‰∏çË∂≥ÔºÅ', 'error');
        }
    }
    
    getBuildingCost(building) {
        const count = this.buildingCounts[building.id] || 0;
        return Math.floor(building.baseCost * Math.pow(1.15, count));
    }
    
    // ËÆ°ÁÆóÊâπÈáèË¥≠‰π∞ÊàêÊú¨
    getBulkCost(building, amount) {
        const currentCount = this.buildingCounts[building.id] || 0;
        let totalCost = 0;
        
        for (let i = 0; i < amount; i++) {
            const cost = Math.floor(building.baseCost * Math.pow(1.15, currentCount + i));
            totalCost += cost;
        }
        
        return totalCost;
    }
    
    getRecursiveProduction(building) {
        const count = this.buildingCounts[building.id] || 0;
        if (count === 0) return 0;
        
        // ÈÄíÂΩíÂ§çÂà∂Êú∫ÔºöÊï∞ÈáèË∂äÂ§öÔºåÂçï‰∏™ÊïàÁéáË∂äÈ´ò
        const multiplier = 1 + (count - 1) * 0.01; // ÊØè‰∏™È¢ùÂ§ñÁöÑÂ§çÂà∂Êú∫Â¢ûÂä†1%ÊïàÁéá
        return building.baseProduction * multiplier;
    }
    
    // Ëé∑ÂèñÂª∫Á≠ëÁöÑÂÆûÈôÖ‰∫ßÈáèÔºàÂåÖÂê´ÂçáÁ∫ßÊïàÊûúÔºâ
    getActualProduction(building) {
        let production = building.baseProduction;
        
        if (building.type === 'recursive') {
            production = this.getRecursiveProduction(building);
        }
        
        // Â∫îÁî®ÂçáÁ∫ßÊïàÊûú
        if (window.upgradesManager) {
            production *= window.upgradesManager.getBuildingMultiplier(building.id);
            
            // ÁâπÊÆäÔºöÈÄíÂΩíÂä†Êàê
            if (building.id === 'recursive_copier') {
                production *= window.upgradesManager.getRecursiveMultiplier();
            }
        }
        
        return production;
    }
    
    updateProduction() {
        this.totalProduction = 0;
        let clickMultiplier = 1;
        
        this.buildings.forEach(building => {
            const count = this.buildingCounts[building.id] || 0;
            if (count === 0) return;
            
            if (building.type === 'click_multiplier') {
                // ÊâãÂä®ÊèêÂèñÂô®Â¢ûÂä†ÁÇπÂáªÊïàÁéáÔºà‰πòÊ≥ïÂä†ÊàêÔºâ
                clickMultiplier *= Math.pow(building.baseProduction, count);
            } else if (building.type === 'recursive') {
                // ÈÄíÂΩíÂ§çÂà∂Êú∫
                let production = this.getRecursiveProduction(building);
                
                // Â∫îÁî®ÂçáÁ∫ßÊïàÊûú
                if (window.upgradesManager) {
                    production *= window.upgradesManager.getBuildingMultiplier(building.id);
                    // ÁâπÊÆäÔºöÈÄíÂΩíÂä†Êàê
                    if (building.id === 'recursive_copier') {
                        production *= window.upgradesManager.getRecursiveMultiplier();
                    }
                }
                
                this.totalProduction += count * production;
            } else if (building.type === 'normal') {
                // ÊôÆÈÄöÂª∫Á≠ëÔºàÂåÖÊã¨ÂéüÁ•ûÔºâ
                let production = building.baseProduction;
                
                // Â∫îÁî®ÂçáÁ∫ßÊïàÊûú
                if (window.upgradesManager) {
                    production *= window.upgradesManager.getBuildingMultiplier(building.id);
                }
                
                this.totalProduction += count * production;
            }
            // auto_clicker Âú®Ê∏∏Êàè‰∏ªÂæ™ÁéØ‰∏≠Â§ÑÁêÜ
        });
        
        // Â∫îÁî®ÂÖ®Â±ÄÂÄçÁéáÔºàÂåÖÊã¨ÂçáÁ∫ßÔºâ
        if (window.upgradesManager) {
            this.totalProduction *= window.upgradesManager.globalMultiplier;
        }
        
        // Êõ¥Êñ∞Ê∏∏Êàè‰∏≠ÁöÑÊï∞ÂÄº
        if (window.game) {
            window.game.energyPerSecond = this.totalProduction;
            window.game.clickMultiplier = clickMultiplier;
            
            // ËÆæÁΩÆËá™Âä®ÁÇπÂáªÂô®
            this.setupAutoClickers();
        }
    }
    
    setupAutoClickers() {
        const autoClickerCount = this.buildingCounts['auto_clicker'] || 0;
        
        if (autoClickerCount > 0 && !window.game.autoClickerInterval) {
            window.game.autoClickerInterval = setInterval(() => {
                if (window.game) {
                    // ÊØè‰∏™Ëá™Âä®ÁÇπÂáªÂô®ÊØè10ÁßíÁÇπÂáª‰∏ÄÊ¨°
                    for (let i = 0; i < autoClickerCount; i++) {
                        window.game.addEnergy(window.game.getClickPower());
                    }
                    
                    // ÈùôÈªòÂ∑•‰ΩúÔºå‰∏çÊòæÁ§∫ÈÄöÁü•
                }
            }, 10000); // 10Áßí
        } else if (autoClickerCount === 0 && window.game.autoClickerInterval) {
            clearInterval(window.game.autoClickerInterval);
            window.game.autoClickerInterval = null;
        }
    }
    
    checkUnlocks() {
        const totalBuildings = Object.values(this.buildingCounts).reduce((sum, count) => sum + count, 0);
        const energy = window.game ? window.game.timeEnergy : 0;
        
        // Ê†πÊçÆÊÄªÂª∫Á≠ëÊï∞ÈáèÂíåËÉΩÈáèËß£ÈîÅÊñ∞Âª∫Á≠ë
        const unlockConditions = [
            { index: 5, condition: totalBuildings >= 5 }, // ÂéüÁ•û
            { index: 6, condition: energy >= 100000 }, // ‰∏âÊ£±Èïú
            { index: 7, condition: totalBuildings >= 10 }, // Êó∂Èó¥ÁîµÈòª
            { index: 8, condition: energy >= 1000000 }, // Á•ñÊØçÈíü
            { index: 9, condition: totalBuildings >= 15 }, // ËñõÂÆöË∞îÁöÑÁå´ÁÆ±
            { index: 10, condition: energy >= 1e9 }, // ÈÄíÂΩíÂ§çÂà∂Êú∫
            { index: 11, condition: totalBuildings >= 25 }, // JS Console
            { index: 12, condition: energy >= 1e12 }, // Â≠òÊ°£ËØªÂèñÂô®
            { index: 13, condition: totalBuildings >= 40 }, // Á¨¨ÂõõÈù¢Â¢ôÁ≤âÁ¢éÂô®
            { index: 14, condition: energy >= 1e15 } // ÁúüÊ≠£ÁöÑÊó∂ÂÖâÊú∫
        ];
        
        unlockConditions.forEach(({ index, condition }) => {
            if (condition && !this.buildings[index].unlocked) {
                this.buildings[index].unlocked = true;
                window.game.showNotification(`üîì Êñ∞Âª∫Á≠ëËß£ÈîÅ: ${this.buildings[index].name}`, 'success');
                this.renderBuildings();
            }
        });
    }
    
    formatNumber(num) {
        if (num >= 1e18) {
            return (num / 1e18).toFixed(2) + 'Qt';
        } else if (num >= 1e15) {
            return (num / 1e15).toFixed(2) + 'Qa';
        } else if (num >= 1e12) {
            return (num / 1e12).toFixed(2) + 'T';
        } else if (num >= 1e9) {
            return (num / 1e9).toFixed(2) + 'B';
        } else if (num >= 1e6) {
            return (num / 1e6).toFixed(2) + 'M';
        } else if (num >= 1e3) {
            return (num / 1e3).toFixed(2) + 'K';
        } else if (num >= 10) {
            return num.toFixed(1);
        } else if (num >= 1) {
            return num.toFixed(2);
        } else {
            return num.toFixed(3);
        }
    }
    
    getBuildingData() {
        return {
            counts: this.buildingCounts,
            totalProduction: this.totalProduction
        };
    }
    
    loadBuildings(data) {
        if (data && data.counts) {
            this.buildingCounts = data.counts;
            this.updateProduction();
            this.renderBuildings();
        }
    }
    
    // ÈáçÁΩÆÊâÄÊúâÂª∫Á≠ë
    resetBuildings() {
        this.buildingCounts = {};
        this.totalProduction = 0;
        this.updateProduction();
        this.renderBuildings();
    }
    
    // Ëé∑ÂèñÁâπÂÆöÁ±ªÂûãÂª∫Á≠ëÁöÑÊï∞Èáè
    getBuildingCountByType(type) {
        let count = 0;
        this.buildings.forEach(building => {
            if (building.type === type) {
                count += this.buildingCounts[building.id] || 0;
            }
        });
        return count;
    }
    
    // Ëé∑ÂèñÁâπÂÆöÂª∫Á≠ëÁöÑÊï∞Èáè
    getBuildingCount(buildingId) {
        return this.buildingCounts[buildingId] || 0;
    }
    
    // Êõ¥Êñ∞Âª∫Á≠ëÂèØË¥≠‰π∞Áä∂ÊÄÅ
    updateAffordableStatus() {
        const buildingCards = document.querySelectorAll('.building-card');
        buildingCards.forEach((card, index) => {
            const building = this.buildings.filter(b => b.unlocked)[index];
            if (building) {
                const cost = this.getBulkCost(building, this.buyAmount);
                const canAfford = window.game && window.game.timeEnergy >= cost;
                
                if (canAfford) {
                    card.classList.add('affordable');
                } else {
                    card.classList.remove('affordable');
                }
            }
        });
    }
    
    // ÊòæÁ§∫Âª∫Á≠ëËØ¶ÊÉÖ
    showBuildingDetails(building) {
        const count = this.buildingCounts[building.id] || 0;
        const actualProduction = this.getActualProduction(building);
        const totalProduction = count * actualProduction;
        
        // ËÆ°ÁÆóÊÄª‰∫ßÂá∫Ôºà‰º∞ÁÆóÔºâ
        const totalLifetimeProduction = this.getTotalLifetimeProduction(building.id);
        
        const detailsPanel = document.createElement('div');
        detailsPanel.style.cssText = `
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 400px;
            max-width: 90vw;
            background: white;
            border: 2px solid #007bff;
            border-radius: 12px;
            padding: 20px;
            z-index: 10000;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            color: #333;
        `;
        
        detailsPanel.innerHTML = `
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
                <h3 style="margin: 0; color: #007bff;">${building.icon} ${building.name}</h3>
                <button id="closeDetails" style="background: none; border: none; font-size: 1.5rem; cursor: pointer; color: #dc3545;">√ó</button>
            </div>
            
            <div style="margin-bottom: 15px;">
                <p style="color: #6c757d; line-height: 1.5;">${building.description}</p>
            </div>
            
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin-bottom: 15px;">
                <div style="background: #f8f9fa; padding: 10px; border-radius: 6px;">
                    <h4 style="margin: 0 0 5px 0; color: #495057;">Êã•ÊúâÊï∞Èáè</h4>
                    <p style="margin: 0; font-size: 1.2rem; font-weight: bold; color: #007bff;">${count}</p>
                </div>
                
                <div style="background: #f8f9fa; padding: 10px; border-radius: 6px;">
                    <h4 style="margin: 0 0 5px 0; color: #495057;">Âçï‰Ωì‰∫ßÈáè</h4>
                    <p style="margin: 0; font-size: 1.2rem; font-weight: bold; color: #28a745;">
                        ${building.type === 'click_multiplier' ? `√ó${building.baseProduction.toFixed(2)}` : 
                          building.type === 'auto_clicker' ? 'ÊØè10Áßí1Ê¨°' : 
                          this.formatNumber(actualProduction) + '/Áßí'}
                    </p>
                </div>
                
                <div style="background: #f8f9fa; padding: 10px; border-radius: 6px;">
                    <h4 style="margin: 0 0 5px 0; color: #495057;">ÊÄª‰∫ßÈáè</h4>
                    <p style="margin: 0; font-size: 1.2rem; font-weight: bold; color: #17a2b8;">
                        ${building.type === 'click_multiplier' ? 'ÁÇπÂáªÂÄçÁéá' : 
                          building.type === 'auto_clicker' ? `${count}Ê¨°/10Áßí` : 
                          this.formatNumber(totalProduction) + '/Áßí'}
                    </p>
                </div>
                
                <div style="background: #f8f9fa; padding: 10px; border-radius: 6px;">
                    <h4 style="margin: 0 0 5px 0; color: #495057;">Á¥ØËÆ°‰∫ßÂá∫</h4>
                    <p style="margin: 0; font-size: 1.2rem; font-weight: bold; color: #6f42c1;">
                        ${this.formatNumber(totalLifetimeProduction)}
                    </p>
                </div>
            </div>
            
            <div style="background: #e7f3ff; padding: 10px; border-radius: 6px; border-left: 4px solid #007bff;">
                <h4 style="margin: 0 0 5px 0; color: #495057;">‰∏ã‰∏Ä‰∏™Âª∫Á≠ëÊàêÊú¨</h4>
                <p style="margin: 0; font-weight: bold; color: #007bff;">
                    ${this.formatNumber(this.getBuildingCost(building))}
                </p>
            </div>
        `;
        
        document.body.appendChild(detailsPanel);
        
        // ÂÖ≥Èó≠ÊåâÈíÆ‰∫ã‰ª∂
        document.getElementById('closeDetails').addEventListener('click', () => {
            document.body.removeChild(detailsPanel);
        });
        
        // ÁÇπÂáªÂ§ñÈÉ®ÂÖ≥Èó≠
        detailsPanel.addEventListener('click', (e) => {
            if (e.target === detailsPanel) {
                document.body.removeChild(detailsPanel);
            }
        });
    }
    
    // Ëé∑ÂèñÂª∫Á≠ëÁ¥ØËÆ°‰∫ßÂá∫Ôºà‰º∞ÁÆóÔºâ
    getTotalLifetimeProduction(buildingId) {
        // ËøôÈáåÂèØ‰ª•ÂÆûÁé∞Êõ¥Â§çÊùÇÁöÑÁªüËÆ°ÔºåÁõÆÂâçËøîÂõûÁÆÄÂçï‰º∞ÁÆó
        const count = this.buildingCounts[buildingId] || 0;
        const building = this.buildings.find(b => b.id === buildingId);
        if (!building || building.type === 'click_multiplier' || building.type === 'auto_clicker') {
            return 0;
        }
        
        const actualProduction = this.getActualProduction(building);
        const gameTime = (Date.now() - (window.game?.gameStartTime || Date.now())) / 1000;
        return count * actualProduction * gameTime * 0.5; // Á≤óÁï•‰º∞ÁÆó
    }
}

// ÂàùÂßãÂåñÂª∫Á≠ëÁÆ°ÁêÜÂô®
let buildingsManager;
document.addEventListener('DOMContentLoaded', () => {
    buildingsManager = new BuildingsManager();
    window.buildingsManager = buildingsManager; // ÂÖ®Â±ÄËÆøÈóÆ
});